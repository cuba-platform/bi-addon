buildscript {
    ext.addonVersion = '1.3-SNAPSHOT'
    ext.addonVersion = rootProject.hasProperty('buildVersion') ? rootProject['buildVersion'] : addonVersion

    ext.cubaVersion = '6.9.0'
    repositories {
        maven {
            url 'http://repository.haulmont.com:8587/nexus/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : System.getenv('HAULMONT_REPOSITORY_USER'))
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : System.getenv('HAULMONT_REPOSITORY_PASSWORD'))
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def globalModule = project(':cuba-bi-global')
def coreModule = project(':cuba-bi-core')
def guiModule = project(':cuba-bi-gui')
def webModule = project(':cuba-bi-web')
def pentahoModule = project(':cuba-bi-pentaho')

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

def pentahoVersion = "7.0.0.0-25";
def pentahoSpringVersion = "4.1.3.RELEASE";

apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.haulmont.addon.bi'
        version = project.addonVersion.replace('-SNAPSHOT', '')
        isSnapshot = project.addonVersion.endsWith('-SNAPSHOT')
    }
    tomcat {
        dir = "$project.rootDir/build/tomcat"
    }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
}


def hsql = 'org.hsqldb:hsqldb:2.2.9'
def postgres = 'org.postgresql:postgresql:9.4-1201-jdbc41'
def mssql = 'com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8'
def mysql = 'mysql:mysql-connector-java:5.1.38'

configure([globalModule, coreModule, guiModule, webModule, pentahoModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }
    
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        jdbc(postgres)
        jdbc(mssql) {
            exclude(group: 'com.microsoft.azure', module: 'azure-keyvault')
        }
        jdbc(mysql)
        testRuntime(hsql)
        testRuntime(postgres)
        testRuntime(mssql) {
            exclude(group: 'com.microsoft.azure', module: 'azure-keyvault')
        }
        testRuntime(mysql)

        if (System.getProperty('oracleDriverClasspath'))
            testRuntime(files(System.getProperty('oracleDriverClasspath')))

    }

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/cuba-bi-core')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'cuba-bi-core'
        appJars('cuba-bi-global', 'cuba-bi-core')
    }

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = 'cubabi'
        dbPort = 9001
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop)  {
        dbName = 'cubabi'
        dbPort = 9001
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task killDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'cubabi'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'cubabi'
        dbUser = 'sa'
        dbPassword = ''
    }

    /* Test data model */

    task testDataModelPostgres(type: Test, dependsOn: testClasses) {
        include("com/haulmont/bidemo/core/DataModelPostgresTest.class")
        systemProperties = System.getProperties()
    }

    task testDataModelHsql(type: Test, dependsOn: testClasses) {
        include("com/haulmont/addon/bi/core/DataModelHsqlTest.class")
        systemProperties = System.getProperties()
    }

    task testDataModelMssql(type: Test, dependsOn: testClasses) {
        include("com/haulmont/addon/bi/core/DataModelMssqlTest.class")
        systemProperties = System.getProperties()
    }

    task testDataModelOracle(type: Test, dependsOn: testClasses) {
        include("com/haulmont/addon/bi/core/DataModelOracleTest.class")
        systemProperties = System.getProperties()
    }

    task testDataModelMysql(type: Test, dependsOn: testClasses) {
        include("com/haulmont/addon/bi/core/DataModelMysqlTest.class")
        systemProperties = System.getProperties()
    }

    /* PostgreSQL */
    task createPostgresDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'cubabi'
        dbUser = 'root'
        dbPassword = 'root'
    }

    task updatePostgresDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'postgres'
        host = 'localhost'
        dbName = 'cubabi'
        dbUser = 'root'
        dbPassword = 'root'
    }

    /* MSSQL */

    task createMssqlDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'mssql'
        host = System.getProperty('mssqlHost') ? System.getProperty('mssqlHost') : 'localhost'
        dbName = System.getProperty('mssqlDbName') ? System.getProperty('mssqlDbName') : 'cubabi'
        dbUser = System.getProperty('mssqlDbUser') ? System.getProperty('mssqlDbUser') : 'sa'
        dbPassword = System.getProperty('mssqlDbPassword') ? System.getProperty('mssqlDbPassword') : 'saPass1'
    }

    task updateMssqlDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'mssql'
        host = System.getProperty('mssqlHost') ? System.getProperty('mssqlHost') : 'localhost'
        dbName = System.getProperty('mssqlDbName') ? System.getProperty('mssqlDbName') : 'cubabi'
        dbUser = System.getProperty('mssqlDbUser') ? System.getProperty('mssqlDbUser') : 'sa'
        dbPassword = System.getProperty('mssqlDbPassword') ? System.getProperty('mssqlDbPassword') : 'saPass1'
    }

    /* Oracle */

    task createOracleDb(dependsOn: assembleDbScripts, description: 'Creates Oracle database', type: CubaDbCreation) {
        dbms = 'oracle'
        host = System.getProperty('oracleHost') ? System.getProperty('oracleHost') : 'localhost'
        dbName = System.getProperty('oracleDbName') ? System.getProperty('oracleDbName') : 'orcl'
        dbUser = 'cubabi'
        dbPassword = 'cubabi'
        oracleSystemPassword = System.getProperty('oracleSystemPassword') ?
                System.getProperty('oracleSystemPassword') : 'oracle'
        driverClasspath = System.getProperty('oracleDriverClasspath') ?
                System.getProperty('oracleDriverClasspath') : "$cuba.tomcat.dir/lib/ojdbc6.jar"
    }

    task updateOracleDb(dependsOn: assembleDbScripts, description: 'Updates Oracle database', type: CubaDbUpdate) {
        dbms = 'oracle'
        host = System.getProperty('oracleHost') ? System.getProperty('oracleHost') : 'localhost'
        dbName = System.getProperty('oracleDbName') ? System.getProperty('oracleDbName') : 'orcl'
        dbUser = 'cubabi'
        dbPassword = 'cubabi'
        driverClasspath = System.getProperty('oracleDriverClasspath') ?
                System.getProperty('oracleDriverClasspath') : "$cuba.tomcat.dir/lib/ojdbc6.jar"
    }

    /* MySQL */

    task createMysqlDb(dependsOn: assembleDbScripts, description: 'Creates MySQL database', type: CubaDbCreation) {
        dbms = 'mysql'
        host = System.getProperty('mysqlHost') ? System.getProperty('mysqlHost') : 'localhost'
        dbName = System.getProperty('mysqlDbName') ? System.getProperty('mysqlDbName') : 'cubabi'
        dbUser = System.getProperty('mysqlDbUser') ? System.getProperty('mysqlDbUser') : 'root'
        dbPassword = System.getProperty('mysqlDbPassword') ? System.getProperty('mysqlDbPassword') : 'root'
        createDbSql = "create database $dbName char set utf8mb4;"
    }

    task updateMysqlDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'mysql'
        host = System.getProperty('mysqlHost') ? System.getProperty('mysqlHost') : 'localhost'
        dbName = System.getProperty('mysqlDbName') ? System.getProperty('mysqlDbName') : 'cubabi'
        dbUser = System.getProperty('mysqlDbUser') ? System.getProperty('mysqlDbUser') : 'root'
        dbPassword = System.getProperty('mysqlDbPassword') ? System.getProperty('mysqlDbPassword') : 'root'
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/bi/**"
        into "$cuba.tomcat.dir/conf/cuba-bi"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/haulmont/addon/bi/**"
        into "$cuba.tomcat.dir/conf/cuba-bi"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'cuba-bi'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/cuba-bi')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'cuba-bi'
        appJars('cuba-bi-global', 'cuba-bi-gui', 'cuba-bi-web')
    }
}

configure(pentahoModule) {
    dependencies {
        compile group: 'javax.servlet', name: 'servlet-api', version: '2.4'
        compile group: 'org.springframework.security', name: 'spring-security-core', version: pentahoSpringVersion
        compile group: 'org.springframework.security', name: 'spring-security-web', version: pentahoSpringVersion
        compile group: 'pentaho', name: 'pentaho-platform-core', version: pentahoVersion
        compile group: 'org.json', name: 'json', version: '20160810'
    }

    task pluginArchive(type: Zip) {
        from file('plugin')
        classifier = 'plugin'
    }

    artifacts {
        archives pluginArchive
    }
}

task undeploy(type: Delete, dependsOn: ':cuba-bi-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/cuba-bi-core")
    delete("$cuba.tomcat.dir/webapps/cuba-bi")
}

task restart(dependsOn: ['stop', ':cuba-bi-core:deploy', ':cuba-bi-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

task aggregateJavadoc(type: Javadoc,
        description: 'Generate javadocs from all child projects as if it was a single project',
        group: 'Documentation') {

    destinationDir = file("$buildDir/docs/javadoc")
    title = "${project.name.toUpperCase()} ${addonVersion.replace('-SNAPSHOT','')} API"

    options.encoding = 'UTF-8'
    options.addStringOption("sourcepath", "")
    options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PUBLIC

    exclude 'com/haulmont/addon/bi/web/toolkit/**'

    subprojects.each { proj ->
        def javadocTask = proj.tasks.getByPath('javadoc')

        source += javadocTask.source
        classpath += javadocTask.classpath
    }
}